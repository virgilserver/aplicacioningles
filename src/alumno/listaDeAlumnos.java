/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package alumno;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.TableRowSorter;
import sql.ConexionSQLServer;
import utilerias.JTextFieldFilter;
import utilerias.mensajesEnPantalla;

/**
 *
 * @author Luis
 */
public class listaDeAlumnos extends javax.swing.JPanel {
    String stringSearch ="";
    boolean isnC = true;
    TreeMap<String, String> carreras = null;
    boolean externo = false;
    private TableRowSorter trsfiltro;
    TreeMap< String, Integer> idAlumnos;
    AgregarAlumno AGA ;

    public AgregarAlumno getAGA() {
        return AGA;
    }

    public void setAGA(AgregarAlumno AGA) {
        this.AGA = AGA;
    }

    /**
     * Creates new form panelPrincipal
     */
    public listaDeAlumnos() {

        initComponents();
        llenarTabla();
        llenartreemapidalumnos();
        trsfiltro =  new TableRowSorter(tablaAlumnos.getModel());
        tablaAlumnos.setRowSorter(trsfiltro);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaAlumnos = new javax.swing.JTable();
        botonEditar = new javax.swing.JButton();
        BotonEliminar = new javax.swing.JButton();
        TFBuscar = new javax.swing.JTextField();
        botonLupita = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(850, 600));

        tablaAlumnos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaAlumnos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(tablaAlumnos);

        botonEditar.setText("Editar");
        botonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEditarActionPerformed(evt);
            }
        });

        BotonEliminar.setText("Eliminar");
        BotonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonEliminarActionPerformed(evt);
            }
        });

        TFBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFBuscarActionPerformed(evt);
            }
        });
        TFBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TFBuscarKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TFBuscarKeyReleased(evt);
            }
        });

        botonLupita.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/iconlupita.png"))); // NOI18N
        botonLupita.setBorder(null);
        botonLupita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLupitaActionPerformed(evt);
            }
        });

        jLabel1.setText("Buscar:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 485, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TFBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonLupita, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(botonEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(BotonEliminar)
                        .addGap(51, 51, 51))))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(TFBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1))
                    .addComponent(botonLupita, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotonEliminar)
                    .addComponent(botonEditar))
                .addGap(24, 24, 24))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void botonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEditarActionPerformed
        // TODO add your handling code here:
          String ncontrol;
       
            int fila = this.tablaAlumnos.getSelectedRow();

            if (fila == (-1)) {
                mensajesEnPantalla.mensajeError("Antes de EDITAR debe seleccionar un alumno", "Advertencia");
            } else {

               ncontrol = (String) this.tablaAlumnos.getValueAt(fila, 0);
                
           AGA.llenarCamposParaEdicion(idAlumnos.get(ncontrol));
           principalAlumno.jTabbedPane1.setSelectedIndex(1);
           AGA.setEntrada("Editar");
           AGA.agregarAlumnoBoton.setText("Editar");
           AGA.idAlumnoTemporal = idAlumnos.get(ncontrol);
           }
        
        
 
     
        
        

    }//GEN-LAST:event_botonEditarActionPerformed

    private void BotonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonEliminarActionPerformed
        // TODO add your handling code here:

        if (tablaAlumnos.getSelectedRow() == (-1)) {
            mensajesEnPantalla.mensajeError("Antes de ELIMINAR debe seleccionar un alumno", "Advertencia");
        } else {
 
           
                String numControl;
                int fila = tablaAlumnos.getSelectedRow();
                numControl = (String) tablaAlumnos.getValueAt(fila, 0);
                String apellido = (String) this.tablaAlumnos.getValueAt(fila, 1);
                String nombre = (String) this.tablaAlumnos.getValueAt(fila, 2);
                String nombreCompleto = apellido.trim() + " " + nombre.trim();

                String mensaje = "Se eliminara el alumno :" + nombreCompleto;

                if (mensajesEnPantalla.mensajePregunta(mensaje, "Eliminar") == 0) {
                   if (ConexionSQLServer.borrarAlumno(idAlumnos.get(numControl))) {

                        llenarTabla();
                        llenartreemapidalumnos();
                        mensajesEnPantalla.mensajeExitoso("Eliminado satisfactoriamente", "Eliminado");

                    }
                }

            
        }
    }//GEN-LAST:event_BotonEliminarActionPerformed

    private void TFBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TFBuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TFBuscarActionPerformed

    private void botonLupitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLupitaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botonLupitaActionPerformed

    private void TFBuscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TFBuscarKeyTyped
        // TODO add your handling code here:
             String cadena = String.valueOf(evt.getKeyChar());
                 int n = evt.getKeyChar();
                 
                 
                if (n == 8 && stringSearch.length() > 0) {
              stringSearch = stringSearch.substring(0, stringSearch.length() - 1);
                    if (stringSearch.length() == 0) {
                        isnC = true ;
                    }
        }else{
                    
                    if (n!=8) {
                          stringSearch += cadena;
                    }
      
                
                }
        System.out.println(stringSearch);
        ////////
    }//GEN-LAST:event_TFBuscarKeyTyped

    private void TFBuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TFBuscarKeyReleased
        // TODO add your handling code here:
      //  repaint();
        TFBuscar.setText(TFBuscar.getText().toUpperCase());
        
        
        
        if (stringSearch.length() > 1 ) {
                     char caracter =  TFBuscar.getText().charAt(1);
          String letra = "" + caracter;
            if (isNumeric(letra)) {
                System.out.println("es numeor de contorl");
                isnC = true;
            }else{
                System.out.println("nombre");
                isnC = false;
            }
           
        }
        filtro(isnC);
    }//GEN-LAST:event_TFBuscarKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonEliminar;
    private javax.swing.JTextField TFBuscar;
    public javax.swing.JButton botonEditar;
    private javax.swing.JButton botonLupita;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    javax.swing.JTable tablaAlumnos;
    // End of variables declaration//GEN-END:variables

    public void llenarTabla() {
        String query = "SELECT * FROM vista_Alumnos";
        tablaAlumnos.setModel(ConexionSQLServer.consultaToJtable(query));
  trsfiltro =  new TableRowSorter(tablaAlumnos.getModel());
        tablaAlumnos.setRowSorter(trsfiltro);
        this.tablaAlumnos.getColumnModel().getColumn(0).setPreferredWidth(105);
        this.tablaAlumnos.getColumnModel().getColumn(0).setResizable(false);
        this.tablaAlumnos.getColumnModel().getColumn(1).setPreferredWidth(250);
        this.tablaAlumnos.getColumnModel().getColumn(1).setResizable(false);
        this.tablaAlumnos.getColumnModel().getColumn(2).setPreferredWidth(220);
        this.tablaAlumnos.getColumnModel().getColumn(2).setResizable(false);
        this.tablaAlumnos.getColumnModel().getColumn(3).setPreferredWidth(10);
        this.tablaAlumnos.getColumnModel().getColumn(3).setResizable(false);
        this.tablaAlumnos.getColumnModel().getColumn(4).setPreferredWidth(150);
        this.tablaAlumnos.getColumnModel().getColumn(4).setResizable(false);
     
        this.tablaAlumnos.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        this.tablaAlumnos.getTableHeader().setReorderingAllowed(false);
     
        this.setVisible(true);
    }

  public void llenartreemapidalumnos() {
        idAlumnos = new TreeMap<>();

        try {
            ResultSet rs = ConexionSQLServer.vistaIdAlumnos();
            while (rs.next()) {
                int id = rs.getInt(1);
                String ncontrol = rs.getString(2);

                idAlumnos.put(ncontrol, id);

            }
        } catch (SQLException ex) {
            Logger.getLogger(listaDeAlumnos.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
  
  
  public void filtro(boolean isnc){
      if (isnc) {
            trsfiltro.setRowFilter(RowFilter.regexFilter(TFBuscar.getText(), 0));
      }else{
        trsfiltro.setRowFilter(RowFilter.regexFilter(TFBuscar.getText(), 1));
      }
   }
  
   public boolean isNumeric(String str) {
        try {
            int d = Integer.parseInt(str);
        } catch (NumberFormatException nfe) {
            return false;
        }
        return true;
    }

}
