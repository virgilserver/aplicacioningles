/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package grupos;

import examen.*;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Set;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import sql.ConexionSQLServer;

/**
 *
 * @author Luis
 */
public class VentanaAdmnGRUPO extends javax.swing.JFrame {
    TreeMap<String, Integer> idAlumnosAsignados, idAlumnosNoAsigandos;
    String idGrupo;
    String nombre, fecha, hora, salon; 
     String stringSearch ="";
    boolean isnC = true;
    private TableRowSorter trsfiltro;
    /**
     * Creates new form VentanaAdmnExamenColocacion
     */
 
    public VentanaAdmnGRUPO(String claveGrupo, String horaIncio, String horaFinal, String salon,String maestro,String idioma) {
        initComponents();
      
          idGrupo = claveGrupo;
                 
        llenarTablaAsignados();
       llenarTablaNoAsignados();
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);

        this.nombre = nombre;
        this.fecha = fecha; 
        this.hora = hora;
        this.salon = salon;
      this.informacionAdmExamenColocacion.setText("Grupo :" + claveGrupo + " Maestro:" + maestro + " Salon:" + salon + " Horario:" +horaIncio + "-" + horaFinal);
    this.setResizable(false);
       Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaParaElegirAlunos = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaAlumnosAsignados = new javax.swing.JTable();
        TFBuscar = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        informacionAdmExamenColocacion = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tablaParaElegirAlunos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaParaElegirAlunos);

        tablaAlumnosAsignados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaAlumnosAsignados.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane2.setViewportView(tablaAlumnosAsignados);

        TFBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TFBuscarKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TFBuscarKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TFBuscarKeyReleased(evt);
            }
        });

        jLabel1.setText("Buscar:");

        jButton1.setText("->");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("<-");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Salir");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        informacionAdmExamenColocacion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        informacionAdmExamenColocacion.setAlignmentX(4.0F);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(informacionAdmExamenColocacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(131, 131, 131)
                                .addComponent(TFBuscar))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(jButton3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(informacionAdmExamenColocacion, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TFBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addComponent(jButton1)
                        .addGap(67, 67, 67)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(4, 4, 4)
                .addComponent(jButton3)
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        
        int fila  = tablaParaElegirAlunos.getSelectedRow();
        
        
        int idA = idAlumnosNoAsigandos.get(tablaParaElegirAlunos.getValueAt(fila, 0));
        ConexionSQLServer.asignarAlumnoAgrupo(idGrupo, idA);
    llenarTablaAsignados();
        llenarTablaNoAsignados();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        int fila = tablaAlumnosAsignados.getSelectedRow();
       int ida = idAlumnosAsignados.get(tablaAlumnosAsignados.getValueAt(fila, 0));
       ConexionSQLServer.desasignarAlumnoAgrupo(idGrupo, ida);
            llenarTablaAsignados();
            llenarTablaNoAsignados(); 
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void TFBuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TFBuscarKeyReleased
        // TODO add your handling code here:
            TFBuscar.setText(TFBuscar.getText().toUpperCase());
        
        
        
        if (stringSearch.length() > 1 ) {
                     char caracter =  TFBuscar.getText().charAt(1);
          String letra = "" + caracter;
            if (isNumeric(letra)) {
                System.out.println("es numeor de contorl");
                isnC = true;
            }else{
                System.out.println("nombre");
                isnC = false;
            }
           
        }
        filtro(isnC);
    }//GEN-LAST:event_TFBuscarKeyReleased

    private void TFBuscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TFBuscarKeyTyped
        // TODO add your handling code here:
               String cadena = String.valueOf(evt.getKeyChar());
                 int n = evt.getKeyChar();
                 
                 
                if (n == 8 && stringSearch.length() > 0) {
              stringSearch = stringSearch.substring(0, stringSearch.length() - 1);
                    if (stringSearch.length() == 0) {
                        isnC = true ;
                    }
        }else{
                    
                    if (n!=8) {
                          stringSearch += cadena;
                    }
      
                
                }
        System.out.println(stringSearch);
    }//GEN-LAST:event_TFBuscarKeyTyped

    private void TFBuscarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TFBuscarKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TFBuscarKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField TFBuscar;
    private javax.swing.JLabel informacionAdmExamenColocacion;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaAlumnosAsignados;
    private javax.swing.JTable tablaParaElegirAlunos;
    // End of variables declaration//GEN-END:variables

    private void llenarTablaAsignados() {
       llenarTreemapAsignados();
        String query = "SELECT     dbo.Alumnos.numeroDeControl AS [N. Control], RTRIM(dbo.Alumnos.nombreAlumno) + ' ' + RTRIM(dbo.Alumnos.apellidoAlumno) AS Nombre\n" +
"FROM         dbo.Grupos INNER JOIN\n" +
"                      dbo.Grupos_has_Alumnos ON dbo.Grupos.idGrupo = dbo.Grupos_has_Alumnos.Grupos_idGrupo INNER JOIN\n" +
"                      dbo.Alumnos ON dbo.Grupos_has_Alumnos.Alumno_idAlumnoG = dbo.Alumnos.idAlumno where dbo.Grupos_has_Alumnos.Grupos_idGrupo = '"+idGrupo+"'";
     DefaultTableModel modelo = ConexionSQLServer.consultaToJtable(query);
     
     
     tablaAlumnosAsignados.setModel(modelo);
   
             this.setVisible(true);
   tablaAlumnosAsignados.getColumnModel().getColumn(0).setPreferredWidth(85);
        tablaAlumnosAsignados.getColumnModel().getColumn(0).setResizable(false);
        
  tablaAlumnosAsignados.getColumnModel().getColumn(1).setPreferredWidth(309);
        tablaAlumnosAsignados.getColumnModel().getColumn(1).setResizable(false);
        
       tablaAlumnosAsignados.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
      tablaAlumnosAsignados.getTableHeader().setReorderingAllowed(false);
     
    
    
    }

    private void llenarTreemapAsignados() {
        try {
            idAlumnosAsignados = new TreeMap<>();
            ResultSet rs = ConexionSQLServer.vistaAlumnoAsignadosAGrupo(idGrupo);
            while (rs.next()) {
                String nc = rs.getString(1);
                int id = rs.getInt(2);
                System.out.println("id = "+id+" nc = "+nc);
                idAlumnosAsignados.put(nc, id);
            }
        } catch (SQLException ex) {
            Logger.getLogger(VentanaAdmnExamenColocacion.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }

    private void llenarTablaNoAsignados() {
        if (idAlumnosAsignados.size() > 0) {
            String ids  =     sacarId();
              tablaParaElegirAlunos.setModel(ConexionSQLServer.consultaToJtable("Select numeroDeControl AS [No. Control],RTRIM(nombreAlumno) + ' ' + RTRIM(apellidoAlumno) as Nombre FROM Alumnos where idAlumno NOT IN (" + ids + ")"));
              
        }else{
             tablaParaElegirAlunos.setModel(ConexionSQLServer.consultaToJtable("Select * FROM vista_AlumnosNoAsignadosExamen"));
          
        }
          trsfiltro =  new TableRowSorter(tablaParaElegirAlunos.getModel());
        tablaParaElegirAlunos.setRowSorter(trsfiltro);
    this.setVisible(true);
    llenarTreemapNoAsignados();
    
    }
    
    
    private void llenarTreemapNoAsignados(){
        try {
            idAlumnosNoAsigandos = new TreeMap<>();
            ResultSet rs = ConexionSQLServer.vistaidAlumnosNoAsigandosExamen();
            while (rs.next()) {
              String nc = rs.getString(1);
              int id = rs.getInt(2);
              idAlumnosNoAsigandos.put(nc, id);
                
            }
        } catch (SQLException ex) {
            Logger.getLogger(VentanaAdmnExamenColocacion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    private String sacarId(){
       
       String idssintax = "";
      
        
        for (int j = 0; j < idAlumnosAsignados.size(); j++) {
            if (j == 0) {
                idssintax += idAlumnosAsignados.get(tablaAlumnosAsignados.getValueAt(j, 0));
            }else{
                 idssintax += ","+idAlumnosAsignados.get(tablaAlumnosAsignados.getValueAt(j, 0));
                 
            }
            
          
          
        }
          System.out.println("idsintaz" + idssintax);
        return idssintax;
    }
    
    
    
  public void filtro(boolean isnc){
      if (isnc) {
            trsfiltro.setRowFilter(RowFilter.regexFilter(TFBuscar.getText(), 0));
      }else{
        trsfiltro.setRowFilter(RowFilter.regexFilter(TFBuscar.getText(), 1));
      }
   }
  
   public boolean isNumeric(String str) {
        try {
            int d = Integer.parseInt(str);
        } catch (NumberFormatException nfe) {
            return false;
        }
        return true;
    }
}
