/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package grupos;

import examen.*;
import java.awt.event.KeyEvent;
import sql.ConexionSQLServer;
import utilerias.JTextFieldFilter;
import utilerias.mensajesEnPantalla;

/**
 *
 * @author Luis
 */
public class panelCalificacionGrupoAlumno extends javax.swing.JPanel {

    String claveGrupo;
    int idAlumno;
    String observacion;
    String calificacion = "";
    boolean caprobado = false, cna = false;

    /**
     * Creates new form panelInfoCalificacionaSIGNADAaci
     */
    public panelCalificacionGrupoAlumno(String nombre, String numeroControl, int calificacion, String observacion, String claveGrupo, int idAlumno) {

        System.out.println("calificion " + calificacion);
        initComponents();
        formatFIeld();
        this.idAlumno = idAlumno;
        this.claveGrupo = claveGrupo;
        this.observacion = observacion;
        this.calificacion = String.valueOf(calificacion);

        llenarInformacion(nombre, numeroControl, calificacion, observacion);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelNombre = new javax.swing.JLabel();
        labelNControl = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        fieldCalificacion = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        comboObservaciones = new javax.swing.JComboBox();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        labelNombre.setText("jLabel1");

        labelNControl.setText("jLabel2");

        jLabel3.setText("Calificacion");

        fieldCalificacion.setText("0");
        fieldCalificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldCalificacionActionPerformed(evt);
            }
        });
        fieldCalificacion.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                fieldCalificacionPropertyChange(evt);
            }
        });
        fieldCalificacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldCalificacionKeyTyped(evt);
            }
        });

        jButton1.setText("ASIGNAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        comboObservaciones.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No Asignada", "N.T.C" }));
        comboObservaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboObservacionesActionPerformed(evt);
            }
        });
        comboObservaciones.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboObservacionesKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelNControl, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fieldCalificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(comboObservaciones, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(56, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNombre)
                    .addComponent(labelNControl)
                    .addComponent(jLabel3)
                    .addComponent(fieldCalificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboObservaciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboObservacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboObservacionesActionPerformed
        // TODO add your handling code here:
        String item = comboObservaciones.getSelectedItem().toString().trim();
        if (item.equals("N.T.C")) {
          //  fieldCalificacion.setText("0");

           // fieldCalificacion.setEnabled(false);
        } else {
            fieldCalificacion.setEnabled(true);
        }

    }//GEN-LAST:event_comboObservacionesActionPerformed

    private void fieldCalificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldCalificacionActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_fieldCalificacionActionPerformed

    private void fieldCalificacionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldCalificacionKeyTyped
        String numero = String.valueOf(evt.getKeyChar());
        int n = evt.getKeyChar();

        if (n == 8 && calificacion.length() > 0) {
            calificacion = calificacion.substring(0, calificacion.length() - 1);
            if (calificacion.length() == 0 || calificacion.equals("0")) {
                fieldCalificacion.setText("");
                if (caprobado) {
                    comboObservaciones.removeItem("APROBADO");
                    caprobado = false;
                }
                if (cna) {
                    comboObservaciones.removeItem("NA");
                    cna = false;
                }
                comboObservaciones.setSelectedItem("No Asignada");
                comboObservaciones.setEnabled(true);
            }
        } else {
            if (isNumeric(numero) && calificacion.length() < 3) {
                calificacion += numero;
            }

        }

        if (!calificacion.isEmpty()) {
            int c = Integer.parseInt(calificacion);
            System.out.println("nc : " + c);

            System.out.println(calificacion);
            
            if (c < 70) {
                if (caprobado) {
                    caprobado = false;
                    comboObservaciones.removeItem("APROBADO");
                }
                
                
                if (cna) {
                   comboObservaciones.setSelectedItem("NA");
                   comboObservaciones.setEnabled(false);
                }else{
                   comboObservaciones.addItem("NA");
                   comboObservaciones.setSelectedItem("NA");
                             comboObservaciones.setEnabled(false);
                   cna = true;
                }
                
            
            }else{
                if (cna) {
                    cna = false;
                    comboObservaciones.removeItem("NA");
                }
                
                 if (caprobado) {
                   comboObservaciones.setSelectedItem("APROBADO");
                   comboObservaciones.setEnabled(false);
                }else{
                   comboObservaciones.addItem("APROBADO");
                   comboObservaciones.setSelectedItem("APROBADO");
                             comboObservaciones.setEnabled(false);
                   caprobado = true;
                }
                
                
                
            }

        }
// TODO add your handling code here:

    }//GEN-LAST:event_fieldCalificacionKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int calificacion;
        String observacion  = comboObservaciones.getSelectedItem().toString().trim();
        if (observacion.equals("N.T.C")  ||  observacion.equals("No Asignada")){
         calificacion = 0;
            
        }else {
        calificacion = Integer.parseInt(fieldCalificacion.getText());

        }

        ConexionSQLServer.asignarCalificacionAlumnoAgrupo(claveGrupo, idAlumno, calificacion, observacion);
  mensajesEnPantalla.mensajeExitoso("Calificacion asignada correctamente", "Registro");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void fieldCalificacionPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_fieldCalificacionPropertyChange
        // TODO add your handling code here:


    }//GEN-LAST:event_fieldCalificacionPropertyChange

    private void comboObservacionesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboObservacionesKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_comboObservacionesKeyPressed

    public void asignar() {
         
  
        int calificacion = Integer.parseInt(fieldCalificacion.getText());
        String observacion = comboObservaciones.getSelectedItem().toString().trim();
if (observacion.equals("N.T.C")  ||  observacion.equals("No Asignada")){
         calificacion = 0;
            
        }else {
        calificacion = Integer.parseInt(fieldCalificacion.getText());

        }
       
        ConexionSQLServer.asignarCalificacionAlumnoAgrupo(claveGrupo, idAlumno, calificacion, observacion);
     }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboObservaciones;
    private javax.swing.JTextField fieldCalificacion;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel labelNControl;
    private javax.swing.JLabel labelNombre;
    // End of variables declaration//GEN-END:variables

    private void llenarInformacion(String nombre, String nContorl, int calificacion, String observacion) {
        labelNombre.setText(nombre);
        labelNControl.setText(nContorl);

        this.comboObservaciones.setSelectedItem(observacion.trim());

        if (observacion.trim().equals("N.T.C")) {
            this.fieldCalificacion.setText(String.valueOf(0));
            this.fieldCalificacion.setEnabled(false);
        } else if (observacion.trim().equals("No Asignada")) {
            this.fieldCalificacion.setText(String.valueOf(0));
            this.comboObservaciones.setEnabled(true);
        } else {
            this.comboObservaciones.addItem(observacion.trim());
            System.out.println(observacion.trim());
            if (observacion.trim().equals("APROBADO")) {
                caprobado = true;
                System.out.println("a");
            } else {
                cna = true;
                System.out.println("r");
            }

            this.fieldCalificacion.setText(String.valueOf(calificacion));
            this.comboObservaciones.setEnabled(false);
            this.comboObservaciones.setSelectedItem(observacion.trim());
        }

    }

    private void formatFIeld() {
        JTextFieldFilter tf = new JTextFieldFilter(JTextFieldFilter.NUMERIC, 3);
        tf.setNegativeAccepted(true);
        this.fieldCalificacion.setDocument(tf);

    }

    public boolean isNumeric(String str) {
        try {
            int d = Integer.parseInt(str);
        } catch (NumberFormatException nfe) {
            return false;
        }
        return true;
    }

}
