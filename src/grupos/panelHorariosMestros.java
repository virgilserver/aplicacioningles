/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package grupos;

import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.ArrayList;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import sql.ConexionSQLServer;
import ventanas.ventanaPrincipal;

/**
 *
 * @author Luis
 */
public class panelHorariosMestros extends javax.swing.JPanel {
      panelClase[][] matrix = new panelClase[15][6];
//    ArrayList<panelClase> pcs;
//    ArrayList<ArrayList> hs;
//    
      
      
      ArrayList<Time> horasTime;
    boolean bool = false;
 ArrayList<hora> horas ;
    ArrayList<horaSalon> horaSalones;
    TreeMap<String, Integer> idMaestros = null;
    /** ArrayList<hora> horas ;
     * Creates new form panelHorariosSalones
     */
    public panelHorariosMestros() {
          
        initComponents();
          crearClaseHora();
        initMatrix();
      llenarComboSalones();
       f();
      //  llenarScrollPanelNiveles();
        
    }
  private void llenarScrollPanelNiveles() {
      System.out.println(horas.size());
      panelHorario.removeAll();
      panelHorario.revalidate();
      
      panelHorario.add(new panelHora("HORARIO"));
        panelHorario.add(new panelHora("LUNES"));
          panelHorario.add(new panelHora("MARTES"));
            panelHorario.add(new panelHora("MIERCOLES"));
              panelHorario.add(new panelHora("JUEVES"));
                panelHorario.add(new panelHora("VIERNES"));
                  panelHorario.add(new panelHora("SABADO"));
                
      
            for (int j = 0; j < horas.size(); j++) {
               panelHorario.add(new panelHora(horas.get(j).toString()));
                 for (int i = 0; i < 6; i++) {
                     panelHorario.add(matrix[j][i]);
        
                }
      
                  
                
                  panelHorario.revalidate();
                }
                
            }
   

    private void crearClaseHora() {
        horasTime = new ArrayList<>();
        horas = new ArrayList<>();
    int horaI = 7;    
        while (horaI<=21) {
       String horainicio = horaI + ":00:00";
            System.out.println(horainicio);
       int horafina = horaI + 1;
       String horafinal =  horafina + ":00:00";
            System.out.println(horafinal);
       hora h = new hora(Time.valueOf(horainicio), Time.valueOf(horafinal));
     
            System.out.println(  h.toString());
       horas.add(h);
       horasTime.add(Time.valueOf(horainicio));
       horaI++;
       }
    
    
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        panelHorario = new javax.swing.JPanel();
        comboSalones = new javax.swing.JComboBox();

        panelHorario.setLayout(new java.awt.GridLayout(16, 7));
        jScrollPane1.setViewportView(panelHorario);

        comboSalones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSalonesActionPerformed(evt);
            }
        });
        comboSalones.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                comboSalonesPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comboSalones, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 567, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(comboSalones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboSalonesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSalonesActionPerformed
        // TODO add your handling code here:
        System.out.println("--------3");
        if (bool) {
            horaSalones =  new ArrayList<>();
            try {
                int id = idMaestros.get(comboSalones.getSelectedItem().toString().trim());
                System.out.println("id del salon"+id);

                ResultSet rs = ConexionSQLServer.vistaHorarioMaestro(id,ventanaPrincipal.idCicloEscolar);
                System.out.println("--------");

                while (rs.next()) {
                    horaSalon  hs ;
                    Time hi = rs.getTime(1);
                    Time hf = rs.getTime(2);
                    String nombreMaestro = rs.getString(4);
                    String tipoCurso = rs.getString(5).trim();
                    String idiomaNivel= rs.getString(6).trim();
  
                    hs = new horaSalon(hi, hf, nombreMaestro, idiomaNivel, tipoCurso);
                    System.out.println(  hs.toString());
                    horaSalones.add(hs);
                    System.out.println("posicion "+timeToInt(hi));

                }
                initMatrix();
                llenarMatrix();
                llenarScrollPanelNiveles();
            } catch (SQLException ex) {
                Logger.getLogger(panelHorariosMestros.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_comboSalonesActionPerformed

    private void comboSalonesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_comboSalonesPropertyChange
        // TODO add your handling code here:

    }//GEN-LAST:event_comboSalonesPropertyChange


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboSalones;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelHorario;
    // End of variables declaration//GEN-END:variables

    private void llenarComboSalones() {
        
        idMaestros = new TreeMap<>();
          try {
       ResultSet rs   = ConexionSQLServer.vistaNombreMaIdioma();
            
            
            while (rs.next()) {
                String nombreMaestro = rs.getString(2);
                int idMaestro = rs.getInt(1);
                idMaestros.put(nombreMaestro.trim(),idMaestro );
                comboSalones.addItem(nombreMaestro.trim());
            }
        } catch (SQLException ex) {
        Logger.getLogger(panelHorariosMestros.class.getName()).log(Level.SEVERE, null, ex);
        }
            
   
    bool = true;
    
    }
    
    
    public void  initMatrix(){
       
        for (int i = 0; i < 15; i++) {
            for (int j = 0; j < 6; j++) {
              matrix[i][j] = new panelClase("Sin Asignar", "Sin Asignar");
            }
        }
        
    }

    private void llenarMatrix() {
   
        for (int i = 0; i < horaSalones.size(); i++) {
              Time horaI= horaSalones.get(i).getHorainicio();
              int posicionytiempo  = timeToInt(horaI);
              String tipoCurso = horaSalones.get(i).getTipoCurso().trim();
              System.out.println("ripoc curso" + tipoCurso);
              String maestro = horaSalones.get(i).getMaestro();
              String idiomaNIvel = horaSalones.get(i).idiomaNivel;
              switch (tipoCurso) {
                case "ESCOLARIZADO":
                    matrix[posicionytiempo][0] = new panelClase(idiomaNIvel, maestro);
                     matrix[posicionytiempo][0].setBackground(Color.CYAN);
                     
                     matrix[posicionytiempo][1] = new panelClase(idiomaNIvel, maestro);
                       matrix[posicionytiempo][1].setBackground(Color.CYAN);
                      matrix[posicionytiempo][2] = new panelClase(idiomaNIvel, maestro);
                        matrix[posicionytiempo][2].setBackground(Color.CYAN);
                       matrix[posicionytiempo][3] = new panelClase(idiomaNIvel, maestro);
                         matrix[posicionytiempo][3].setBackground(Color.CYAN);
                       
                    break;
                case "SABATINO":
                    Time  horafs = horaSalones.get(i).getHorafinal();
                    int posicionyfTiempo = timeToInt(horafs);
                    
                    
                    for (int j = posicionytiempo; j < posicionyfTiempo; j++) {
                             matrix[j][5] = new panelClase(idiomaNIvel, maestro);
                    }
                    
                    
                   
                    break;
                case "VIERNES":
                       Time  horafv = horaSalones.get(i).getHorafinal();
                    int posicionyfTiempov = timeToInt(horafv);
                    
                    
                    for (int j = posicionytiempo; j < posicionyfTiempov; j++) {
                             matrix[j][4] = new panelClase(idiomaNIvel, maestro);
                    }
                    
                    
                   
                    break;
                default:
                    throw new AssertionError();
            }
  
              
              
        }
    
    }
    
   public int timeToInt(Time hora){
       int i = 0;
       
     i =  horasTime.indexOf(hora);
       
       
       
       
       
       return i;
   }


 private void f() {
    horaSalones =  new ArrayList<>();
            try {
                int id = idMaestros.get(comboSalones.getSelectedItem().toString());
                System.out.println("id del salon"+id);

                ResultSet rs = ConexionSQLServer.vistaHorarioSalon(id,ventanaPrincipal.idCicloEscolar);
                System.out.println("--------");

                while (rs.next()) {
                    horaSalon  hs ;
                    Time hi = rs.getTime(1);
                    Time hf = rs.getTime(2);
                    String nombreMaestro = rs.getString(4);
                    String tipoCurso = rs.getString(5).trim();
                    String idiomaNivel= rs.getString(6).trim();
  
                    hs = new horaSalon(hi, hf, nombreMaestro, idiomaNivel, tipoCurso);
                    System.out.println(  hs.toString());
                    horaSalones.add(hs);
                    System.out.println("posicion "+timeToInt(hi));

                }
                initMatrix();
                llenarMatrix();
                llenarScrollPanelNiveles();
            } catch (SQLException ex) {
                Logger.getLogger(panelHorariosSalones.class.getName()).log(Level.SEVERE, null, ex);
            }
    
    
    
    }


}
